# coding: utf-8
import os
import sys
sys.path.append(os.pardir)
import numpy as np
import matplotlib.pyplot as plt
from dataset.mnist import load_mnist
from common.multi_layer_net_extend import MultiLayerNetExtend
from common.trainer import Trainer
from bayes_opt.bayesian_optimization import BayesianOptimization

(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True)

## 1 워드파일
network = MultiLayerNetExtend(input_size=784, hidden_size_list=[100],
                              output_size=10, activation='relu', weight_init_std='he', 
                              weight_decay_lambda=0.001, use_dropout=False, dropout_ration=0)
trainer = Trainer(network, x_train, t_train, x_test, t_test,
                  epochs=100, mini_batch_size=100,
                  optimizer='Adam', optimizer_param={'lr': 0.1}, verbose=False)
trainer.train()
test_acc = trainer.test_acc_list[-1]            
train_acc_list, test_acc_list = trainer.train_acc_list, trainer.test_acc_list

markers = {'train': 'o', 'test': 's'}
x = np.arange(len(train_acc_list))
plt.plot(x, train_acc_list, marker='o', label='train', markevery=10)
plt.plot(x, test_acc_list, marker='s', label='test', markevery=10)
plt.xlabel("epochs")
plt.ylabel("accuracy")
plt.ylim(0, 1.0)
plt.legend(loc='lower right')
plt.show()

## 2
def mnist(lam, drop, lr):
    network = MultiLayerNetExtend(input_size=784, hidden_size_list=[100],
                                  output_size=10, activation='relu', weight_init_std='he', 
                                  weight_decay_lambda=lam, use_dropout=True, dropout_ration=drop)
    trainer = Trainer(network, x_train, t_train, x_test, t_test,
                      epochs=100, mini_batch_size=100,
                      optimizer='Adam', optimizer_param={'lr': lr}, verbose=False)
    trainer.train()
    test_acc = trainer.test_acc_list[-1]
    return(test_acc)

bayesopt = BayesianOptimization(f=mnist, 
                                pbounds={'lam':[0, 0.01], 'drop':[0,0.3],'lr':[0.01,0.99]}, 
                                verbose=1)
bayesopt.maximize(init_points=5,n_iter=25)
print(bayesopt.maximize)
